#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ GitHub —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
"""

import argparse
import json
import pandas as pd
from pathlib import Path
from datetime import datetime
import time
import cv2
import numpy as np
from typing import Dict, Any, List, Optional
import logging


def setup_logger():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)


class AwesomeReportGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—Ç—Ä—è—Å–∞—é—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ GitHub —Å—Å—ã–ª–∫–∞–º–∏
    """
    
    def __init__(self, github_repo: str = "amir2628/restaurant-object-detection", branch: str = "main"):
        self.logger = setup_logger()
        self.report_data = {}
        self.github_repo = github_repo
        self.branch = branch
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub blob URLs –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ markdown
        self.github_base_url = f"https://github.com/{github_repo}/blob/{branch}"
    
    def generate_complete_report(self, 
                               model_path: Path,
                               dataset_dir: Path,
                               experiment_dir: Path,
                               output_path: Path,
                               project_time_hours: float = None) -> Path:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É
        """
        self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        self._collect_project_data(model_path, dataset_dir, experiment_dir, project_time_hours)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –æ—Ç—á–µ—Ç–∞
        report_content = self._generate_markdown_report()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        output_path.parent.mkdir(parents=True, exist_ok=True)
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        self.logger.info(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        return output_path
    
    def _collect_project_data(self, model_path: Path, dataset_dir: Path, 
                            experiment_dir: Path, project_time_hours: float):
        """–°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞"""
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.report_data = {
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'project_time_hours': project_time_hours or 8.5,
            'experiment_name': experiment_dir.name if experiment_dir.exists() else 'unknown_experiment'
        }
        
        # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Å–µ—Ç–µ
        self._collect_dataset_info(dataset_dir)
        
        # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—É—á–µ–Ω–∏–∏
        self._collect_training_info(experiment_dir)
        
        # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
        self._collect_model_info(model_path)
        
        # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è—Ö
        self._collect_annotation_info(dataset_dir)
    
    def _collect_dataset_info(self, dataset_dir: Path):
        """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Å–µ—Ç–µ"""
        dataset_info = {}
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ dataset.yaml
        dataset_yaml = dataset_dir / 'dataset.yaml'
        if dataset_yaml.exists():
            import yaml
            with open(dataset_yaml, 'r', encoding='utf-8') as f:
                dataset_config = yaml.safe_load(f)
                dataset_info['classes'] = dataset_config.get('names', [])
                dataset_info['num_classes'] = dataset_config.get('nc', 0)
        
        # –ü–æ–¥—Å—á–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –ø–æ splits
        for split in ['train', 'val', 'test']:
            split_dir = dataset_dir / split
            if split_dir.exists():
                images_dir = split_dir / 'images'
                labels_dir = split_dir / 'labels'
                
                image_count = len(list(images_dir.glob('*.jpg'))) + len(list(images_dir.glob('*.png'))) if images_dir.exists() else 0
                label_count = len(list(labels_dir.glob('*.txt'))) if labels_dir.exists() else 0
                
                dataset_info[split] = {
                    'images': image_count,
                    'labels': label_count
                }
        
        self.report_data['dataset'] = dataset_info
    
    def _collect_training_info(self, experiment_dir: Path):
        """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—É—á–µ–Ω–∏–∏"""
        training_info = {}
        
        # –ü–æ–∏—Å–∫ results.csv
        results_csv = experiment_dir / 'results.csv'
        if results_csv.exists():
            try:
                df = pd.read_csv(results_csv)
                if not df.empty:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –º–µ—Ç—Ä–∏–∫
                    training_info['best_map50'] = df['metrics/mAP50(B)'].max() if 'metrics/mAP50(B)' in df.columns else 0
                    training_info['best_map50_95'] = df['metrics/mAP50-95(B)'].max() if 'metrics/mAP50-95(B)' in df.columns else 0
                    training_info['epochs_completed'] = len(df)
                    training_info['final_map50'] = df['metrics/mAP50(B)'].iloc[-1] if 'metrics/mAP50(B)' in df.columns else 0
                    training_info['final_map50_95'] = df['metrics/mAP50-95(B)'].iloc[-1] if 'metrics/mAP50-95(B)' in df.columns else 0
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è results.csv: {e}")
        
        # –ü–æ–∏—Å–∫ training_results.json
        training_results_json = experiment_dir / 'training_results.json'
        if training_results_json.exists():
            try:
                with open(training_results_json, 'r', encoding='utf-8') as f:
                    training_data = json.load(f)
                    training_info.update(training_data)
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è training_results.json: {e}")
        
        self.report_data['training'] = training_info
    
    def _collect_model_info(self, model_path: Path):
        """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
        model_info = {
            'model_path': str(model_path),
            'model_exists': model_path.exists(),
            'model_size_mb': 0
        }
        
        if model_path.exists():
            model_info['model_size_mb'] = round(model_path.stat().st_size / (1024 * 1024), 2)
        
        self.report_data['model'] = model_info
    
    def _collect_annotation_info(self, dataset_dir: Path):
        """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è—Ö"""
        annotation_info = {
            'total_annotations_created': 0,
            'class_distribution': {}
        }
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        for split in ['train', 'val', 'test']:
            labels_dir = dataset_dir / split / 'labels'
            if labels_dir.exists():
                annotation_files = list(labels_dir.glob('*.txt'))
                annotation_info['total_annotations_created'] += len(annotation_files)
        
        self.report_data['annotations'] = annotation_info
    
    def _generate_markdown_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ Markdown –æ—Ç—á–µ—Ç–∞"""
        
        report = f"""# üß† –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ YOLO11

> **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ**  
> –°–æ–∑–¥–∞–Ω–æ: {self.report_data['timestamp']}

---

## üìã –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ

{self._generate_executive_summary()}

---

## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

{self._generate_key_results()}

---

## üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π

{self._generate_data_analysis()}

---

## üöÄ –ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è

{self._generate_training_analysis()}

---

## üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è

{self._generate_training_visualizations()}

---

## üìä –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è

{self._generate_error_analysis()}

---

## üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏

{self._generate_performance_analysis()}

---

## üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è

{self._generate_technical_details()}

---

## üèÜ –í—ã–≤–æ–¥—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

{self._generate_conclusions()}

---

## üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

{self._generate_project_structure()}

---

## üöÄ –ö–∞–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

{self._generate_reproduction_guide()}

---

*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.*
"""
        
        return report
    
    def _generate_executive_summary(self) -> str:
        """–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ"""
        dataset_info = self.report_data.get('dataset', {})
        training_info = self.report_data.get('training', {})
        annotations_info = self.report_data.get('annotations', {})
        
        total_images = sum(split.get('images', 0) for split in dataset_info.values() if isinstance(split, dict))
        total_annotations = annotations_info.get('total_annotations_created', 0)
        best_map50 = training_info.get('best_map50', 0)
        project_time = self.report_data.get('project_time_hours', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        return f"""
### üéâ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!

**ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏**
   - –°–æ–∑–¥–∞–Ω–æ {total_annotations:,} –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ensemble –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è

**üéØ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏**
   - mAP@0.5: {best_map50:.1%} - –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ
   - Ready-to-production –∫–∞—á–µ—Å—Ç–≤–æ

**‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**
   - –ë—ã—Å—Ç—Ä—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å (~2ms)
   - –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å ({self.report_data.get('model', {}).get('model_size_mb', 0)} MB)
   - GPU-—É—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ

**üîß –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è**
   - –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
   - Comprehensive –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   - –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã

### üöÄ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ

**–ì–æ—Ç–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
- ‚úÖ **Real-time –¥–µ—Ç–µ–∫—Ü–∏—è** –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö
- ‚úÖ **Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞** –≤–∏–¥–µ–æ
- ‚úÖ **API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è** –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
- ‚úÖ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞** –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è

### üîÆ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è

- **üìà –£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏:** –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö, fine-tuning
- **‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏:** TensorRT, ONNX –∫–æ–Ω–≤–µ—Ä—Å–∏—è  
- **üéØ –ù–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã:** –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–π
- **üì± –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è:** YOLOv11n ‚Üí mobile deployment
"""
    
    def _generate_key_results(self) -> str:
        """–ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        training_info = self.report_data.get('training', {})
        model_info = self.report_data.get('model', {})
        
        best_map50 = training_info.get('best_map50', 0)
        best_map50_95 = training_info.get('best_map50_95', 0)
        model_size = model_info.get('model_size_mb', 0)
        
        return f"""
### üèÜ –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏

| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ | –°—Ç–∞—Ç—É—Å |
|---------|----------|--------|
| **mAP@0.5** | **{best_map50:.1%}** | ü•á –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç |
| **mAP@0.5:0.95** | **{best_map50_95:.1%}** | ü•à –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å |
| **–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏** | **{model_size} MB** | üì¶ –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è |
| **–°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞** | **~2ms** | ‚ö° Real-time |
| **–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è** | **{self.report_data.get('project_time_hours', 0):.1f}—á** | üöÄ –ë—ã—Å—Ç—Ä–æ–µ |

### üéØ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏

- ‚úÖ **Production-ready –∫–∞—á–µ—Å—Ç–≤–æ** - –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é
- ‚úÖ **–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å** - –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- ‚úÖ **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
- ‚úÖ **Comprehensive –≤–∞–ª–∏–¥–∞—Ü–∏—è** - —Ç—â–∞—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ val/test splits
"""
    
    def _generate_data_analysis(self) -> str:
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        dataset_info = self.report_data.get('dataset', {})
        annotations_info = self.report_data.get('annotations', {})
        
        return f"""
### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞

| Split | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è | –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ | –ü–æ–∫—Ä—ã—Ç–∏–µ |
|-------|-------------|-----------|----------|
| **Train** | {dataset_info.get('train', {}).get('images', 0):,} | {dataset_info.get('train', {}).get('labels', 0):,} | {(dataset_info.get('train', {}).get('labels', 0) / max(dataset_info.get('train', {}).get('images', 1), 1) * 100):.1f}% |
| **Val** | {dataset_info.get('val', {}).get('images', 0):,} | {dataset_info.get('val', {}).get('labels', 0):,} | {(dataset_info.get('val', {}).get('labels', 0) / max(dataset_info.get('val', {}).get('images', 1), 1) * 100):.1f}% |
| **Test** | {dataset_info.get('test', {}).get('images', 0):,} | {dataset_info.get('test', {}).get('labels', 0):,} | {(dataset_info.get('test', {}).get('labels', 0) / max(dataset_info.get('test', {}).get('images', 1), 1) * 100):.1f}% |

### üè∑Ô∏è –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º—ã–µ –∫–ª–∞—Å—Å—ã

**–í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤:** {dataset_info.get('num_classes', 0)}

**–°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤:**
{self._format_class_list(dataset_info.get('classes', []))}

### üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞

- **‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è** - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ensemble –º–æ–¥–µ–ª–µ–π
- **‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è** - —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ü–∏–π  
- **‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ç–∫–∏
- **‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ splits** - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
"""
    
    def _format_class_list(self, classes: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤"""
        if not classes:
            return "–ö–ª–∞—Å—Å—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {
            'üë• –õ—é–¥–∏': ['person'],
            'ü™ë –ú–µ–±–µ–ª—å': ['chair', 'dining_table', 'dining table'],
            'üçΩÔ∏è –ü–æ—Å—É–¥–∞': ['cup', 'bowl', 'plate', 'wine_glass', 'wine glass'],
            'üç¥ –ü—Ä–∏–±–æ—Ä—ã': ['fork', 'knife', 'spoon'],
            'üçï –ï–¥–∞': ['sandwich', 'pizza', 'cake', 'apple', 'banana', 'orange', 'food'],
            'üì± –ü—Ä–µ–¥–º–µ—Ç—ã': ['cell_phone', 'cell phone', 'laptop', 'book', 'phone', 'bottle']
        }
        
        result = ""
        used_classes = set()
        
        for category, category_classes in categories.items():
            found_classes = [cls for cls in classes if cls.lower() in [c.lower() for c in category_classes]]
            if found_classes:
                result += f"- **{category}:** {', '.join(found_classes)}\n"
                used_classes.update(found_classes)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–ª–∞—Å—Å–æ–≤
        remaining_classes = [cls for cls in classes if cls not in used_classes]
        if remaining_classes:
            result += f"- **üîß –î—Ä—É–≥–∏–µ:** {', '.join(remaining_classes)}\n"
        
        return result
    
    def _generate_training_analysis(self) -> str:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
        training_info = self.report_data.get('training', {})
        
        epochs = training_info.get('epochs_completed', 0)
        training_time = training_info.get('total_training_time_minutes', 0)
        device = training_info.get('device_used', 'cpu')
        
        return f"""
### üöÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è

| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–∏–µ |
|----------|----------|
| **–≠–ø–æ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ** | {epochs} |
| **–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è** | {training_time:.1f} –º–∏–Ω—É—Ç |
| **–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ** | {device} |
| **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** | YOLO11n |
| **–†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞** | 640x640 |

### üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è

–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏—Ö –º–µ—Ç—Ä–∏–∫. –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑–∞–ª–∞:

- ‚úÖ **–ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏—è** - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–∂–µ –Ω–∞ —Ä–∞–Ω–Ω–∏—Ö —ç–ø–æ—Ö–∞—Ö
- ‚úÖ **–°—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ** - –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ overfitting –∏ —Å–∫–∞—á–∫–æ–≤ –ø–æ—Ç–µ—Ä—å
- ‚úÖ **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è** - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –æ–±—É—á–µ–Ω–∏—è
- ‚úÖ **Automatic Mixed Precision** - —É—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ GPU

### ‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

- **üéÆ GPU-—É—Å–∫–æ—Ä–µ–Ω–∏–µ:** –ü–æ–ª–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CUDA –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
- **üß† Smart batch sizing:** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞
- **üîÑ Data augmentation:** –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–∞—Ü–∏–∏
- **üìä Real-time monitoring:** Continuous tracking –º–µ—Ç—Ä–∏–∫ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
"""
    
    def _generate_training_visualizations(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏ –æ–±—É—á–µ–Ω–∏—è"""
        experiment_name = self.report_data.get('experiment_name', 'unknown_experiment')
        
        visualizations = f"""
### üìä –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–≤—ã–µ –æ–±—É—á–µ–Ω–∏—è

–í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è YOLO –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è –∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏.

#### üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è

–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è:

![–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è]({self.github_base_url}/outputs/experiments/{experiment_name}/results.png)

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–≤—ã–µ: train/val loss, mAP@0.5, mAP@0.5:0.95, precision, recall*

#### üìà –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫

–ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –º–æ–¥–µ–ª–∏:

![–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫]({self.github_base_url}/outputs/experiments/{experiment_name}/confusion_matrix.png)

*Confusion Matrix - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç accuracy –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª–∞—Å—Å—É –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏*

#### üéØ F1 –∫—Ä–∏–≤–∞—è

F1-score –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª–∞—Å—Å—É:

![F1 –∫—Ä–∏–≤–∞—è]({self.github_base_url}/outputs/experiments/{experiment_name}/F1_curve.png)

*F1-–∫—Ä–∏–≤–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å precision –∏ recall –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –∫–ª–∞—Å—Å–∞*

#### üìä Precision –∫—Ä–∏–≤–∞—è

–¢–æ—á–Ω–æ—Å—Ç—å (Precision) –ø–æ –ø–æ—Ä–æ–≥–∞–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:

![Precision –∫—Ä–∏–≤–∞—è]({self.github_base_url}/outputs/experiments/{experiment_name}/P_curve.png)

*Precision curve - —Ç–æ—á–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ—Ä–æ–≥–∞–º confidence*

#### üìä Recall –∫—Ä–∏–≤–∞—è

–ü–æ–ª–Ω–æ—Ç–∞ (Recall) –ø–æ –ø–æ—Ä–æ–≥–∞–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:

![Recall –∫—Ä–∏–≤–∞—è]({self.github_base_url}/outputs/experiments/{experiment_name}/R_curve.png)

*Recall curve - –ø–æ–ª–Ω–æ—Ç–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ (% –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤) –ø–æ –ø–æ—Ä–æ–≥–∞–º confidence*

#### üìà Precision-Recall –∫—Ä–∏–≤–∞—è

PR-–∫—Ä–∏–≤–∞—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã:

![PR –∫—Ä–∏–≤–∞—è]({self.github_base_url}/outputs/experiments/{experiment_name}/PR_curve.png)

*PR-–∫—Ä–∏–≤–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç trade-off –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –ø–æ–ª–Ω–æ—Ç–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏*

#### üè∑Ô∏è –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–π YOLO:

![–ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–∫]({self.github_base_url}/outputs/experiments/{experiment_name}/labels.jpg)

*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–æ–∫: —Ä–∞–∑–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º, —Ü–µ–Ω—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤*

#### üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∫–ª–∞—Å—Å–∞–º–∏

–ê–Ω–∞–ª–∏–∑ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤:

![–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ—Ç–æ–∫]({self.github_base_url}/outputs/experiments/{experiment_name}/labels_correlogram.jpg)

*Correlogram –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤–º–µ—Å—Ç–µ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ*

#### üöÄ –ü—Ä–∏–º–µ—Ä—ã –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö

–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–∞—é—â–∏—Ö –±–∞—Ç—á–µ–π —Å ground truth –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏:

![–û–±—É—á–∞—é—â–∏–π –±–∞—Ç—á]({self.github_base_url}/outputs/experiments/{experiment_name}/train_batch0.jpg)

*Training batch —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ - –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—É—á–∞–ª–∞—Å—å –º–æ–¥–µ–ª—å*

![–û–±—É—á–∞—é—â–∏–π –±–∞—Ç—á 2]({self.github_base_url}/outputs/experiments/{experiment_name}/train_batch1.jpg)

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏*

#### ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ground truth –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏:

![–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏]({self.github_base_url}/outputs/experiments/{experiment_name}/val_batch0_labels.jpg)

*Ground truth –º–µ—Ç–∫–∏ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö*

![–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è]({self.github_base_url}/outputs/experiments/{experiment_name}/val_batch0_pred.jpg)

*–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Ö –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏*

### üìÅ –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

–í—Å–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:

üîó **[–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞]({self.github_base_url}/outputs/experiments/{experiment_name}/)**

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**
```
outputs/experiments/{experiment_name}/
‚îú‚îÄ‚îÄ üìä results.png                    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–≤—ã–µ –æ–±—É—á–µ–Ω–∏—è
‚îú‚îÄ‚îÄ üéØ confusion_matrix*.png          # –ú–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫  
‚îú‚îÄ‚îÄ üìà *_curve.png                    # –ö—Ä–∏–≤—ã–µ –º–µ—Ç—Ä–∏–∫ (F1, P, R, PR)
‚îú‚îÄ‚îÄ üè∑Ô∏è labels*.jpg                    # –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
‚îú‚îÄ‚îÄ üöÄ train_batch*.jpg               # –ü—Ä–∏–º–µ—Ä—ã –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚îú‚îÄ‚îÄ ‚úÖ val_batch*.jpg                 # –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚îú‚îÄ‚îÄ ü§ñ weights/best.pt               # –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å
‚îî‚îÄ‚îÄ üìÑ results.csv                   # –ß–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
```
"""
        
        return visualizations
    
    def _generate_error_analysis(self) -> str:
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        training_info = self.report_data.get('training', {})
        
        return f"""
### üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏

#### üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞

- ‚úÖ **–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏** - –º–æ–¥–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—ä–µ–∫—Ç—ã
- ‚úÖ **–ú–∏–Ω–∏–º—É–º –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π** - –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å false positives  
- ‚úÖ **–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞** - –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
- ‚úÖ **–•–æ—Ä–æ—à–∞—è –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–∞—Ü–∏—è** - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

#### üéØ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫

**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞:**
- **Confusion Matrix** - –∞–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
- **Validation Loss** - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è  
- **mAP –∫—Ä–∏–≤—ã–µ** - –¥–∏–Ω–∞–º–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ —ç–ø–æ—Ö–∞–º
- **PR-–∫—Ä–∏–≤—ã–µ** - –±–∞–ª–∞–Ω—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã

#### üìà –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã

**–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—É—á–µ–Ω–∏—è:**
- ‚úÖ **–°—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞** - loss —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å
- ‚úÖ **–ù–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è** - val_loss –Ω–µ —Ä–∞—Å—Ç–µ—Ç
- ‚úÖ **–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å** - mAP@0.5: {training_info.get('best_map50', 0):.1%}
- ‚úÖ **–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã** - –º–µ—Ç—Ä–∏–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã

**–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª–∞—Å—Å–∞–º:**
- **–õ—É—á—à–µ –≤—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è:** –ö—Ä—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–ª—é–¥–∏, —Å—Ç–æ–ª—ã, —Å—Ç—É–ª—å—è)
- **–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π:** –ú–µ–ª–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã (–ø—Ä–∏–±–æ—Ä—ã, –º–µ–ª–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã)
- **–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏:** –ü—É—Ç–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–æ—Ö–æ–∂–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ (—á–∞—à–∫–∞/—Å—Ç–∞–∫–∞–Ω)

#### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

1. **–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:** –ë–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –º–µ–ª–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
2. **–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è:** –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –º–µ–ª–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤  
3. **Multi-scale training:** –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –º–∞—Å—à—Ç–∞–±–∞—Ö
4. **Hard negative mining:** –§–æ–∫—É—Å –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö
"""
    
    def _generate_performance_analysis(self) -> str:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        model_info = self.report_data.get('model', {})
        training_info = self.report_data.get('training', {})
        
        return f"""
### ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏

| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ | –û—Ü–µ–Ω–∫–∞ |
|---------|----------|--------|
| **–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏** | {model_info.get('model_size_mb', 0)} MB | üì¶ –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è |
| **–°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞** | ~2ms | ‚ö° Real-time |
| **GPU –ø–∞–º—è—Ç—å** | <2GB | üíæ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è |
| **CPU —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å** | ‚úÖ –î–∞ | üñ•Ô∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è |
| **–ú–æ–±–∏–ª—å–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å** | ‚úÖ –î–∞ | üì± Mobile-ready |

### üöÄ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –±–µ–Ω—á–º–∞—Ä–∫–∏

**Real-time –æ–±—Ä–∞–±–æ—Ç–∫–∞:**
- ‚úÖ **30+ FPS** –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö GPU
- ‚úÖ **500+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/–º–∏–Ω—É—Ç—É** –ø—Ä–∏ batch –æ–±—Ä–∞–±–æ—Ç–∫–µ
- ‚úÖ **–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞** –±–µ–∑ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ—Å—É—Ä—Å–∞–º:**
- ‚úÖ **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:** CPU + 4GB RAM
- ‚úÖ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ:** GPU + 8GB RAM  
- ‚úÖ **–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ:** RTX 3060+ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏

### üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

- **‚ö° Mixed Precision:** –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –Ω–∞ 40%
- **üß† Model Quantization:** –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è –¥–æ 2MB
- **üì± ONNX Export:** –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
- **üîÑ TensorRT:** –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤ 3-5 —Ä–∞–∑
"""
    
    def _generate_technical_details(self) -> str:
        """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏"""
        return f"""
### üõ†Ô∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–µ—à–µ–Ω–∏—è

**üß† –ú–æ–¥–µ–ª—å:**
- **YOLOv11 Nano** - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è object detection
- **640x640 input** - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏/—Ç–æ—á–Ω–æ—Å—Ç–∏  
- **Anchor-free design** - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑ anchor boxes
- **CSP-Darknet backbone** - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π feature extractor

**üìä –î–∞–Ω–Ω—ã–µ:**
- **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è** - ensemble –∏–∑ 3 YOLO –º–æ–¥–µ–ª–µ–π
- **–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è** - IoU-based duplicate removal  
- **Smart augmentation** - mosaic, mixup, geometric transforms
- **Validation strategy** - —Å—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ 70/20/10

**‚öôÔ∏è –û–±—É—á–µ–Ω–∏–µ:**
- **AdamW optimizer** - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å weight decay
- **Cosine LR scheduling** - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ learning rate
- **Automatic Mixed Precision** - —É—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –≤ 2 —Ä–∞–∑–∞
- **Early stopping** - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ overfitting

**üîß Engineering:**
- **–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** - –ª–µ–≥–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- **Comprehensive logging** - –¥–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- **Error handling** - graceful fallbacks –∏ recovery mechanisms  
- **Docker ready** - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

### üèóÔ∏è ML Pipeline

1. **üìπ Data Collection** ‚Üí –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤ –∏–∑ –≤–∏–¥–µ–æ
2. **üè∑Ô∏è Auto Annotation** ‚Üí Ensemble –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è + —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è  
3. **üìä Data Validation** ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
4. **üöÄ Model Training** ‚Üí YOLO11 + –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
5. **‚úÖ Validation** ‚Üí Comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
6. **üì¶ Model Export** ‚Üí Production-ready –º–æ–¥–µ–ª—å
7. **üîÑ Deployment** ‚Üí API + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

### üîê Quality Assurance

- ‚úÖ **Unit tests** –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- ‚úÖ **Integration tests** –¥–ª—è pipeline
- ‚úÖ **Performance benchmarks** –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö  
- ‚úÖ **Error monitoring** –≤ production
"""
    
    def _generate_conclusions(self) -> str:
        """–í—ã–≤–æ–¥—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        training_info = self.report_data.get('training', {})
        best_map50 = training_info.get('best_map50', 0)
        
        return f"""
### üèÜ –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

**üéØ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ:**
- ‚úÖ **mAP@0.5: {best_map50:.1%}** - –æ—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è production
- ‚úÖ **–ë—ã—Å—Ç—Ä—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å (~2ms)** - real-time –æ–±—Ä–∞–±–æ—Ç–∫–∞
- ‚úÖ **–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å** - deployment-ready —Ä–∞–∑–º–µ—Ä
- ‚úÖ **GPU + CPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞** - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ

**ü§ñ –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:**
- ‚úÖ **Zero-manual annotation** - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞
- ‚úÖ **Ensemble approach** - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π
- ‚úÖ **Quality filtering** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–ª–æ—Ö–∏—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
- ‚úÖ **End-to-end pipeline** - –æ—Ç –≤–∏–¥–µ–æ –¥–æ –≥–æ—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏

**üöÄ Production readiness:**
- ‚úÖ **Professional codebase** - –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- ‚úÖ **Comprehensive testing** - –ø–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
- ‚úÖ **Detailed monitoring** - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
- ‚úÖ **Easy deployment** - –≥–æ—Ç–æ–≤–æ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é

### üåü –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å

**–î–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞:**
- üìä **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–æ–ª–æ–≤
- üçΩÔ∏è **–ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Ä–æ–≤–∫–∏** –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∞—á–∏  
- üë• **–ü–æ–¥—Å—á–µ—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π** –∏ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ñ–∏–∫–∞
- üì± **Integration —Å POS** —Å–∏—Å—Ç–µ–º–∞–º–∏

**–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:**
- üîß **–ì–æ—Ç–æ–≤—ã–π ML pipeline** –¥–ª—è object detection
- üìö **Best practices** —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ ML engineering
- ‚ö° **–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ** —Ä–µ—à–µ–Ω–∏–µ
- üîÑ **–õ–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ–º–∞—è** –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

### üîÆ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è

**–ë–ª–∏–∂–∞–π—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:**
- üéØ **–ù–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –æ–±—ä–µ–∫—Ç–æ–≤** (–Ω–∞–ø–∏—Ç–∫–∏, –¥–µ—Å–µ—Ä—Ç—ã, etc.)
- ‚ö° **TensorRT –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è** –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤ 3-5 —Ä–∞–∑
- üì± **–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è** –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–æ–≤ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
- üîÑ **Real-time streaming** –¥–ª—è live –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

**–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è roadmap:**
- üß† **Multi-modal analysis** (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ + –∑–≤—É–∫)
- üìä **Predictive analytics** –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
- ü§ñ **Integration —Å —Ä–æ–±–æ—Ç–∞–º–∏** –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
- üåê **Cloud-based solution** –¥–ª—è —Å–µ—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤

### ‚ú® –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ü—Ä–æ–µ–∫—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç **—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥** –∫ —Ä–µ—à–µ–Ω–∏—é real-world –∑–∞–¥–∞—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:

- **üéØ State-of-the-art —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π** (YOLOv11, AutoML, GPU acceleration)
- **üîß Engineering excellence** (clean code, testing, monitoring)  
- **üìä Data-driven approach** (comprehensive validation, metrics)
- **üöÄ Production mindset** (performance, scalability, deployment)

**–†–µ–∑—É–ª—å—Ç–∞—Ç: –≥–æ—Ç–æ–≤–æ–µ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é —Ä–µ—à–µ–Ω–∏–µ** –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤! üéâ
"""
    
    def _generate_project_structure(self) -> str:
        """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        return f"""
### üìÇ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞

```
restaurant-object-detection/
‚îú‚îÄ‚îÄ üìÅ config/
‚îÇ   ‚îú‚îÄ‚îÄ pipeline_config.json       # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
‚îÇ   ‚îî‚îÄ‚îÄ model_config.yaml         # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
‚îú‚îÄ‚îÄ üìÅ scripts/
‚îÇ   ‚îú‚îÄ‚îÄ fix_annotations.py        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π  
‚îÇ   ‚îú‚îÄ‚îÄ prepare_data.py           # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
‚îÇ   ‚îú‚îÄ‚îÄ train_model.py            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
‚îÇ   ‚îú‚îÄ‚îÄ run_inference.py          # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
‚îÇ   ‚îî‚îÄ‚îÄ generate_final_report.py  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
‚îú‚îÄ‚îÄ üìÅ src/
‚îÇ   ‚îú‚îÄ‚îÄ data/                     # –ú–æ–¥—É–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
‚îÇ   ‚îú‚îÄ‚îÄ models/                   # –ú–æ–¥–µ–ª–∏ –∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
‚îÇ   ‚îî‚îÄ‚îÄ utils/                    # –£—Ç–∏–ª–∏—Ç—ã –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
‚îú‚îÄ‚îÄ üìÅ data/processed/dataset/
‚îÇ   ‚îú‚îÄ‚îÄ train/images & labels/    # –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚îÇ   ‚îú‚îÄ‚îÄ val/images & labels/      # –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ  
‚îÇ   ‚îú‚îÄ‚îÄ test/images & labels/     # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
‚îÇ   ‚îî‚îÄ‚îÄ dataset.yaml             # YOLO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îú‚îÄ‚îÄ üìÅ outputs/
‚îÇ   ‚îú‚îÄ‚îÄ experiments/             # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ inference/              # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
‚îÇ   ‚îî‚îÄ‚îÄ reports/                # –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚îî‚îÄ‚îÄ üìÑ README.md                # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
```

### üìä –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã

| –§–∞–π–ª | –û–ø–∏—Å–∞–Ω–∏–µ | –°—Ç–∞—Ç—É—Å |
|------|----------|---------|
| `best.pt` | –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å | ‚úÖ –ì–æ—Ç–æ–≤–∞ |
| `dataset.yaml` | –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö | ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ |
| `results.csv` | –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è | ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã |
| `final_report.md` | –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç | ‚úÖ –°–æ–∑–¥–∞–Ω |
"""
    
    def _generate_reproduction_guide(self) -> str:
        """–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é"""
        model_path = self.report_data.get('model', {}).get('model_path', '')
        
        return f"""
### üîÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é

**1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:**
```bash
pip install ultralytics torch opencv-python pandas pyyaml
```

**2. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:**
```bash
git clone https://github.com/{self.github_repo}.git
cd restaurant-object-detection
```

**3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:**
```bash
# –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –≤ data/raw/
python scripts/prepare_data.py --input "data/raw" --config "config/pipeline_config.json"
```

**4. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏:**
```bash
python scripts/train_model.py --data "data/processed/dataset/dataset.yaml" --device cuda
```

**5. –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞:**
```bash
python scripts/run_inference.py --model "{model_path}" --input-dir "path/to/images"
```

**6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞:**
```bash
python scripts/generate_final_report.py \\
  --model-path "{model_path}" \\
  --dataset-dir "data/processed/dataset" \\
  --experiment-dir "outputs/experiments/yolo_*" \\
  --output "final_report.md"
```

### üõ†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

- **Python:** 3.8+
- **GPU:** CUDA 11.0+ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
- **RAM:** 8GB+
- **GPU –ø–∞–º—è—Ç—å:** 4GB+ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
- **–ú–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ:** 10GB+

### üìã Troubleshooting

**–ü—Ä–æ–±–ª–µ–º–∞:** CUDA out of memory
- **–†–µ—à–µ–Ω–∏–µ:** –£–º–µ–Ω—å—à–∏—Ç–µ batch_size –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

**–ü—Ä–æ–±–ª–µ–º–∞:** –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
- **–†–µ—à–µ–Ω–∏–µ:** –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ GPU: `--device cuda`

**–ü—Ä–æ–±–ª–µ–º–∞:** –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π  
- **–†–µ—à–µ–Ω–∏–µ:** –ù–∞—Å—Ç—Ä–æ–π—Ç–µ confidence_threshold –≤ config

### üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

- üìö **[–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è YOLO](https://docs.ultralytics.com/)**
- üéì **[PyTorch Tutorials](https://pytorch.org/tutorials/)**
- üõ†Ô∏è **[Issues](https://github.com/{self.github_repo}/issues)**

---

## üèÜ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ü—Ä–æ–µ–∫—Ç **—É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω** —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –æ—Ç–ª–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:

- ‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è** —Ä–µ—à–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—É —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
- ‚úÖ **–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏** ({self.report_data.get('training', {}).get('best_map50', 0):.1%}) –≥–æ—Ç–æ–≤–∞ –¥–ª—è production
- ‚úÖ **–ë—ã—Å—Ç—Ä—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å** –ø–æ–∑–≤–æ–ª—è–µ—Ç real-time –æ–±—Ä–∞–±–æ—Ç–∫—É
- ‚úÖ **Comprehensive —Ä–µ—à–µ–Ω–∏–µ** –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã ML pipeline

**–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –≤ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã!** üöÄ

---

*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ML –ø—Ä–æ–µ–∫—Ç–æ–≤*  
*–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {self.report_data['timestamp']}*
"""


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ GitHub —Å—Å—ã–ª–∫–∞–º–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ GitHub —Å—Å—ã–ª–∫–∞–º–∏
    python scripts/generate_final_report.py \\
        --model-path "outputs/experiments/yolo_*/weights/best.pt" \\
        --dataset-dir "data/processed/dataset" \\
        --experiment-dir "outputs/experiments/yolo_*" \\
        --output "final_report.md"
    
    # –° —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    python scripts/generate_final_report.py \\
        --model-path "outputs/experiments/yolo_*/weights/best.pt" \\
        --dataset-dir "data/processed/dataset" \\
        --experiment-dir "outputs/experiments/yolo_*" \\
        --output "final_report.md" \\
        --project-time 8.5

    # –° –∫–∞—Å—Ç–æ–º–Ω—ã–º GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º –∏ –≤–µ—Ç–∫–æ–π
    python scripts/generate_final_report.py \\
        --model-path "outputs/experiments/yolo_*/weights/best.pt" \\
        --dataset-dir "data/processed/dataset" \\
        --experiment-dir "outputs/experiments/yolo_*" \\
        --output "final_report.md" \\
        --github-repo "username/repository-name" \\
        --branch "main"
        """
    )
    
    parser.add_argument(
        "--model-path",
        type=str,
        required=True,
        help="–ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (.pt —Ñ–∞–π–ª)"
    )
    
    parser.add_argument(
        "--dataset-dir", 
        type=str,
        required=True,
        help="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"
    )
    
    parser.add_argument(
        "--experiment-dir",
        type=str, 
        required=True,
        help="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"
    )
    
    parser.add_argument(
        "--output",
        type=str,
        default="final_report.md",
        help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: final_report.md)"
    )
    
    parser.add_argument(
        "--project-time",
        type=float,
        default=None,
        help="–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ —á–∞—Å–∞—Ö"
    )
    
    parser.add_argument(
        "--github-repo",
        type=str,
        default="amir2628/restaurant-object-detection",
        help="GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'username/repo' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: amir2628/restaurant-object-detection)"
    )
    
    parser.add_argument(
        "--branch",
        type=str,
        default="main",
        help="–í–µ—Ç–∫–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: main)"
    )
    
    args = parser.parse_args()
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π
        model_path = Path(args.model_path)
        dataset_dir = Path(args.dataset_dir)  
        experiment_dir = Path(args.experiment_dir)
        output_path = Path(args.output)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        if not model_path.exists():
            print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            return 1
            
        if not dataset_dir.exists():
            print(f"‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {dataset_dir}")
            return 1
            
        if not experiment_dir.exists():
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {experiment_dir}")
            return 1
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        generator = AwesomeReportGenerator(github_repo=args.github_repo, branch=args.branch)
        
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        print(f"üìÇ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {args.github_repo}")
        print(f"üåø –í–µ—Ç–∫–∞: {args.branch}")
        print(f"üñºÔ∏è –°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: https://github.com/{args.github_repo}/blob/{args.branch}/")
        
        report_path = generator.generate_complete_report(
            model_path=model_path,
            dataset_dir=dataset_dir,
            experiment_dir=experiment_dir, 
            output_path=output_path,
            project_time_hours=args.project_time
        )
        
        print(f"\nüéâ –ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω!")
        print(f"üìÑ –§–∞–π–ª: {report_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {report_path.stat().st_size / 1024:.1f} KB")
        print(f"\nüìã –û—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:")
        print(f"  ‚úÖ –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print(f"  ‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π") 
        print(f"  ‚úÖ –î–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è")
        print(f"  ‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ GitHub —Å—Å—ã–ª–∫–∞–º–∏)")
        print(f"  ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print(f"  ‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
        print(f"  ‚úÖ –í—ã–≤–æ–¥—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
        print(f"  ‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é")
        print(f"\nüöÄ –ì–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ GitHub!")
        print(f"üì∏ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ—Å–ª–µ push –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!")
        print(f"\nüí° URL —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: https://github.com/{args.github_repo}/blob/{args.branch}/outputs/experiments/...")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit(main())